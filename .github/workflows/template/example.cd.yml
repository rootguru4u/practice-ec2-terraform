# =================================================================
# Example CD (Continuous Deployment) Workflow
# This workflow handles the actual deployment of infrastructure
# =================================================================

name: 'Example - CD Infrastructure Deployment'

# =================================================================
# Trigger Configuration
# - Only runs on main branch to control production deployments
# - Manual trigger for controlled deployments
# =================================================================
on:
  push:
    branches:
      - main              # Only deploy from main branch
  workflow_dispatch:      # Manual trigger option

# =================================================================
# Environment Variables
# - Required for Terraform Cloud integration
# - Logging configuration
# =================================================================
env:
  TF_CLOUD_ORGANIZATION: "your-org-name"   # Your TF Cloud org
  TF_WORKSPACE: "your-workspace"           # Your TF workspace
  TF_LOG: "INFO"                          # Terraform log level

# =================================================================
# Jobs Configuration
# =================================================================
jobs:
  deploy:
    name: 'Deploy Infrastructure'
    runs-on: ubuntu-latest    # Using Ubuntu runner

    # Ensure CI passes before deployment
    needs: []  # Configure after testing

    # Default settings for all steps
    defaults:
      run:
        shell: bash
        working-directory: ./terraform    # Set working directory

    # =================================================================
    # Sequential Steps for Deployment
    # =================================================================
    steps:
      # ----------------------------------------------------------------
      # Step 1: Get Code
      # - Checks out your repository code
      # - Essential first step for deployment
      # ----------------------------------------------------------------
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ----------------------------------------------------------------
      # Step 2: AWS Authentication
      # - Sets up AWS credentials
      # - Required for AWS resource management
      # ----------------------------------------------------------------
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1    # Specify your AWS region

      # ----------------------------------------------------------------
      # Step 3: Terraform Setup
      # - Installs Terraform
      # - Configures Terraform Cloud access
      # ----------------------------------------------------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0    # Specify version
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # ----------------------------------------------------------------
      # Step 4: Initialize Terraform
      # - Sets up working directory
      # - Configures backend
      # - Downloads providers
      # ----------------------------------------------------------------
      - name: Terraform Init
        id: init
        run: terraform init

      # ----------------------------------------------------------------
      # Step 5: Plan Deployment
      # - Creates execution plan
      # - Shows resource changes
      # - Continues even if plan has changes
      # ----------------------------------------------------------------
      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false
        continue-on-error: true

      # ----------------------------------------------------------------
      # Step 6: Apply Changes
      # - Deploys infrastructure changes
      # - Only runs on main branch
      # - Requires successful plan
      # ----------------------------------------------------------------
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && steps.plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false

      # ----------------------------------------------------------------
      # Step 7: Deployment Verification
      # - Confirms successful deployment
      # - Shows output values
      # ----------------------------------------------------------------
      - name: Verify Deployment
        if: steps.apply.outcome == 'success'
        run: |
          echo "Deployment completed successfully"
          terraform output

      # ----------------------------------------------------------------
      # Step 8: Error Handling
      # - Handles deployment failures
      # - Provides error information
      # ----------------------------------------------------------------
      - name: Notify on Failure
        if: failure()
        run: |
          echo "Deployment failed"
          echo "Check the logs for more details"

# =================================================================
# End of CD Workflow
# =================================================================

# =================================================================
# Required Secrets:
# - AWS_ACCESS_KEY_ID: AWS access key for authentication
# - AWS_SECRET_ACCESS_KEY: AWS secret key for authentication
# - TF_API_TOKEN: Terraform Cloud API token
# =================================================================

# =================================================================
# Notes:
# 1. This workflow only deploys from the main branch
# 2. Manual triggers are available for controlled deployments
# 3. AWS credentials must be properly configured
# 4. Terraform Cloud connection must be set up
# 5. All secrets must be configured in GitHub
# ================================================================= 