name: 'CI - Validate Infrastructure'

# Trigger on pull requests and pushes to any branch
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'
  workflow_dispatch:  # Allow manual trigger

env:
  TF_LOG: "INFO"
  TF_CLOUD_ORGANIZATION: "rootguru-infotech"
  TF_WORKSPACE: "ec2-deployment"

jobs:
  validate:
    name: 'Validate Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      # Step 1: Check out code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Step 3: Initialize Terraform
      - name: Initialize Terraform
        id: init
        run: terraform init -backend=false

      # Step 4: Check Format
      - name: Check Terraform Format
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      # Step 5: Validate Configuration
      - name: Validate Terraform Configuration
        id: validate
        run: terraform validate

      # Step 6: Security Scan (optional)
      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        continue-on-error: true

      # Step 7: Lint Check
      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v3
        continue-on-error: true

      # Step 8: Post Results
      - name: Post Validation Results
        if: always()
        run: |
          echo "Format Check: ${{ steps.fmt.outcome }}"
          echo "Validation: ${{ steps.validate.outcome }}" 